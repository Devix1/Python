from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
import asyncio
import random
import logging

API_TOKEN = "7949826200:AAHEkia1CLL8USTVPO4j97IAsXvqZFFapQE"  

logging.basicConfig(level=logging.INFO)


user_data = {}

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()


play_again_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="/start")]],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "number": random.randint(1, 100),
        "attempts": 0
    }
    await message.answer(
        "üéØ –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message()
async def handle_guess(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id not in user_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∏–≥—Ä—É —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    if not text.isdigit():
        await message.answer("‚ùó –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return

    guess = int(text)
    game = user_data[user_id]
    game["attempts"] += 1
    target = game["number"]
    attempts = game["attempts"]

    if guess < target:
        await message.answer(f"–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ{attempts}: –ú–æ—ë —á–∏—Å–ª–æ –±–æ–ª—å—à–µ ‚¨ÜÔ∏è")
    elif guess > target:
        await message.answer(f"–ü–æ–ø—ã—Ç–∫–∞ ‚Ññ{attempts}: –ú–æ—ë —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ ‚¨áÔ∏è")
    else:
        await message.answer(
            f"üéâ –£–≥–∞–¥–∞–ª! –ú–æ—ë —á–∏—Å–ª–æ –±—ã–ª–æ <b>{target}</b>.\n"
            f"–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –∑–∞ <b>{attempts}</b> –ø–æ–ø—ã—Ç–æ–∫!",
            reply_markup=play_again_keyboard
        )
        del user_data[user_id]


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
